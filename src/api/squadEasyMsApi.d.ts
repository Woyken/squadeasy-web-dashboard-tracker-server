/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/chat/api/1.0/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChatService_getChats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/api/1.0/chat/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChatService_getBroadcastChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/api/1.0/chat/direct/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChatService_getDirectChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/api/1.0/chat/direct/{id}/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ChatService_postDirectChatMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/api/1.0/chat/team": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChatService_getTeamChat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/api/1.0/chat/{chatType}/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["ChatService_postChatMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/api/1.0/chat/{chatType}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChatService_getChatMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chat/api/1.0/chat/{chatType}/{id}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ChatService_getChatMessagesById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/1.0/tokens-create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["NotificationService_createNotificationToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/1.0/tokens-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["NotificationService_deleteNotificationToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/1.0/user-preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["MSService_getUserNotificationPreferences"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["MSService_updateUserNotificationPreferences"];
        trace?: never;
    };
    "/tracker/1.0/chunks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["MSService_createTrackerChunk"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ChatConversationDetailsRemoteEntity: {
            createdAt?: string;
            updatedAt?: string;
            type: string;
            members?: components["schemas"]["SquadEasyApi.UserRemoteEntity"][];
            messages?: components["schemas"]["ChatMessageRemoteEntity"][];
        };
        ChatConversationRemoteEntity: {
            id?: string;
            image?: string;
            publicImage?: string;
            name: string;
            updatedAt: string;
            isRead: boolean;
            isMuted?: boolean;
            type: string;
            lastMessage?: string;
        };
        ChatMessageRemoteEntity: {
            id: string;
            type: string;
            message?: string;
            mediaUrl?: string;
            senderId: string;
            createdAt: string;
        };
        ChatPostMessageRemoteEntity: {
            message: string;
        };
        ChunkHeadingRemoteEntity: {
            timestamp: string;
            /** Format: double */
            magneticHeading: number;
            /** Format: double */
            headingAccuracy: number;
        };
        ChunkLocationRemoteEntity: {
            timestamp: string;
            /** Format: double */
            latitude: number;
            /** Format: double */
            longitude: number;
            /** Format: double */
            altitude: number;
            /** Format: double */
            ellipsoidalAltitude?: number;
            /** Format: float */
            horizontalAccuracy: number;
            /** Format: float */
            verticalAccuracy: number;
            /** Format: float */
            speed: number;
            /** Format: float */
            speedAccuracy: number;
            /** Format: int32 */
            floor?: number;
            sourceInformation: components["schemas"]["ChunkLocationSourceInformationRemoteEntity"];
        };
        ChunkLocationSourceInformationRemoteEntity: {
            isSimulatedBySoftware?: boolean;
            isProducedByAccessory: boolean;
        };
        ChunkMetadataRemoteEntity: {
            sessionId: string;
            activityId: string;
            currentActivityId: string;
            state: string;
            mobilityReasonId?: string;
            isInitial?: boolean;
            isOver?: boolean;
            isCancel?: boolean;
        };
        ChunkMotionsRemoteEntity: {
            toto: string;
        };
        ChunkRemoteEntity: {
            id: string;
            createdAt: string;
            updatedAt: string;
            /** Format: int32 */
            steps: number;
            locations?: components["schemas"]["ChunkLocationRemoteEntity"][];
            headings?: components["schemas"]["ChunkHeadingRemoteEntity"][];
            motions?: components["schemas"]["ChunkMotionsRemoteEntity"];
            metadata: components["schemas"]["ChunkMetadataRemoteEntity"];
        };
        NotificationTokenBodyRemoteEntity: {
            deviceId: string;
            token: string;
        };
        "SquadEasyApi.UserRemoteEntity": {
            id: string;
            email?: string;
            firstName: string;
            lastName: string;
            image?: string;
            publicImage?: string;
            isActivityPublic?: boolean;
            /** Format: int32 */
            boostCount?: number;
            isBoostable?: boolean;
            isCaptain?: boolean;
            languageCode?: string;
            teamId?: string;
            teamName?: string;
            points?: number;
            entityId?: string;
        };
        UserNotificationBodyRemoteEntity: {
            id?: string;
            enabled?: boolean;
        };
        UserNotificationRemoteEntity: {
            id: string;
            isEnabled: string;
            title: string;
        };
    };
    responses: never;
    parameters: {
        CommonMsParams: "challenge" | string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    ChatService_getChats: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatConversationRemoteEntity"][];
                };
            };
        };
    };
    ChatService_getBroadcastChat: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatConversationDetailsRemoteEntity"];
                };
            };
        };
    };
    ChatService_getDirectChat: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatConversationDetailsRemoteEntity"];
                };
            };
        };
    };
    ChatService_postDirectChatMessage: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatPostMessageRemoteEntity"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChatService_getTeamChat: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatConversationDetailsRemoteEntity"];
                };
            };
        };
    };
    ChatService_postChatMessage: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path: {
                chatType: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatPostMessageRemoteEntity"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ChatService_getChatMessages: {
        parameters: {
            query: {
                sinceDate: string;
            };
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path: {
                chatType: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatMessageRemoteEntity"][];
                };
            };
        };
    };
    ChatService_getChatMessagesById: {
        parameters: {
            query: {
                sinceDate: string;
            };
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path: {
                chatType: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatMessageRemoteEntity"][];
                };
            };
        };
    };
    NotificationService_createNotificationToken: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationTokenBodyRemoteEntity"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NotificationService_deleteNotificationToken: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationTokenBodyRemoteEntity"];
            };
        };
        responses: {
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MSService_getUserNotificationPreferences: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserNotificationRemoteEntity"][];
                };
            };
        };
    };
    MSService_updateUserNotificationPreferences: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserNotificationBodyRemoteEntity"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserNotificationRemoteEntity"][];
                };
            };
        };
    };
    MSService_createTrackerChunk: {
        parameters: {
            query?: never;
            header: {
                "client-white-label-id": components["parameters"]["CommonMsParams"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChunkRemoteEntity"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
}
